import pickle
import os
import tkinter as tk
from tkinter import ttk
from tkinter import simpledialog, messagebox


class Employee:
    def __init__(self, employee_id, name, job_title, department):
        self.employee_id = employee_id
        self.name = name
        self.job_title = job_title
        self.department = department

 def update(self, new_details):
        self.name = new_details.get('name', self.name)
        self.job_title = new_details.get('job_title', self.job_title)
        self.department = new_details.get('department', self.department)


class EmployeeManager:
    def __init__(self):
        self.employees = self.load_employees()

    def add_employee(self, employee):
        self.employees.append(employee)
        self.save_employees()

    def delete_employee(self, employee_id):
        self.employees = [emp for emp in self.employees if emp.employee_id != employee_id]
        self.save_employees()

    def modify_employee(self, employee_id, new_details):
        for emp in self.employees:
            if emp.employee_id == employee_id:
                emp.update(new_details)
                self.save_employees()
                return True
        return False

    def save_employees(self):
        with open('employees.pkl', 'wb') as output:
            pickle.dump(self.employees, output, pickle.HIGHEST_PROTOCOL)

    def load_employees(self):
        if os.path.exists('employees.pkl'):
            with open('employees.pkl', 'rb') as input:
                return pickle.load(input)
        return []

class Guest:
    def __init__(self, guest_id, name, address, contact_info):
        self.guest_id = guest_id
        self.name = name
        self.address = address
        self.contact_info = contact_info



class GuestManager:
    def __init__(self):
        self.guests = self.load_guests()

    def add_guest(self, guest):
        self.guests.append(guest)
        self.save_guests()

    def load_guests(self):
        try:
            with open('guests.pkl', 'rb') as input:
                return pickle.load(input)
        except FileNotFoundError:
            return []

    def save_guests(self):
        with open('guests.pkl', 'wb') as output:
            pickle.dump(self.guests, output, pickle.HIGHEST_PROTOCOL)


class Venue:
     def __init__(self, venue_id, name, address, capacity):
        self.venue_id = venue_id
        self.name = name
        self.address = address
        self.capacity = capacity


class VenueManager:
    def __init__(self):
        self.venues = self.load_venues()

    def add_venue(self, venue):
        self.venues.append(venue)
        self.save_venues()

    def load_venues(self):
        try:
            with open('venues.pkl', 'rb') as input:
                return pickle.load(input)
        except FileNotFoundError:
            return []

    def save_venues(self):
        with open('venues.pkl', 'wb') as output:
            pickle.dump(self.venues, output, pickle.HIGHEST_PROTOCOL)


class Event:
    def __init__(self, event_id, type, theme, date, time, duration):
        self.event_id = event_id
        self.type = type
        self.theme = theme
        self.date = date
        self.time = time
        self.duration = duration


class EventManager:
    def __init__(self):
        self.events = self.load_events()

    def add_event(self, event):
        self.events.append(event)
        self.save_events()

    def load_events(self):
        try:
            with open('events.pkl', 'rb') as input:
                return pickle.load(input)
        except FileNotFoundError:
            return []

    def save_events(self):
        with open('events.pkl', 'wb') as output:
            pickle.dump(self.events, output, pickle.HIGHEST_PROTOCOL)


class AppController:
    def __init__(self):
        self.employee_manager = EmployeeManager()
        self.guest_manager = GuestManager()
        self.venue_manager = VenueManager()
        self.event_manager = EventManager()

    # Employee Methods
    def add_employee(self, employee_details):
        employee = Employee(**employee_details)
        self.employee_manager.add_employee(employee)

    def delete_employee(self, employee_id):
        self.employee_manager.delete_employee(employee_id)

    def modify_employee(self, employee_id, new_details):
        return self.employee_manager.modify_employee(employee_id, new_details)

    def get_employees(self):
        return self.employee_manager.employees

    # Guest Methods
    def add_guest(self, guest_details):
        guest = Guest(**guest_details)
        self.guest_manager.add_guest(guest)

    def delete_guest(self, guest_id):
        self.guest_manager.delete_guest(guest_id)

    def modify_guest(self, guest_id, new_details):
        return self.guest_manager.modify_guest(guest_id, new_details)

    def get_guests(self):
        return self.guest_manager.guests

    # Venue Methods
    def add_venue(self, venue_details):
        venue = Venue(**venue_details)
        self.venue_manager.add_venue(venue)

    def delete_venue(self, venue_id):
        self.venue_manager.delete_venue(venue_id)

    def modify_venue(self, venue_id, new_details):
        return self.venue_manager.modify_venue(venue_id, new_details)

    def get_venues(self):
        return self.venue_manager.venues

    # Event Methods
    def add_event(self, event_details):
        event = Event(**event_details)
        self.event_manager.add_event(event)

    def delete_event(self, event_id):
        self.event_manager.delete_event(event_id)

    def modify_event(self, event_id, new_details):
        return self.event_manager.modify_event(event_id, new_details)

    def get_events(self):
        return self.event_manager.events


class EventManagementApp:
    def __init__(self, root):
        self.controller = AppController()
        self.root = root
        self.root.title("Event Management System")
        self.root.geometry("500x300")

        tk.Button(self.root, text="Add Employee", command=self.add_employee, width=20).grid(row=0, column=0, pady=10,
                                                                                            padx=10)
        tk.Button(self.root, text="Delete Employee", command=self.delete_employee, width=20).grid(row=1, column=0,
                                                                                                  pady=10, padx=10)
        tk.Button(self.root, text="Modify Employee", command=self.modify_employee, width=20).grid(row=2, column=0,
                                                                                                  pady=10, padx=10)
        tk.Button(self.root, text="Display Employees", command=self.view_employees, width=20).grid(row=3, column=0,
                                                                                                   pady=10, padx=10)
        tk.Button(self.root, text="Add Event", command=self.add_event, width=20).grid(row=0, column=1, pady=10, padx=10)
        tk.Button(self.root, text="Display Event", command=self.view_event, width=20).grid(row=1, column=1, pady=10,
                                                                                           padx=10)
        tk.Button(self.root, text="Add Venue", command=self.add_venue, width=20).grid(row=2, column=1, pady=10, padx=10)
        tk.Button(self.root, text="Display Venue", command=self.view_venue, width=20).grid(row=3, column=1, pady=10,
                                                                                           padx=10)
        tk.Button(self.root, text="Add Client", command=self.add_guest, width=20).grid(row=0, column=2, pady=10,
                                                                                       padx=10)
        tk.Button(self.root, text="Display Client", command=self.view_guest, width=20).grid(row=1, column=2, pady=10,
                                                                                            padx=10)
        # tk.Button(self.root, text="Add Suplier", command=self.view_employees, width=20).grid(row=2, column=2, pady=10, padx=10)
        # tk.Button(self.root, text="Display Suplier", command=self.view_employees, width=20).grid(row=3, column=2, pady=10, padx=10)

        self.root.grid_columnconfigure(0, weight=1)  # Makes the column expandable

    def add_employee(self):
        self.top = tk.Toplevel(self.root)
        self.top.title("Add New Employee")
        self.top.geometry("300x200")

        # Note: Key names are now simplified and match the constructor parameters exactly
        labels = ["Employee ID", "Name", "Job Title", "Department"]
        field_names = ["employee_id", "name", "job_title", "department"]  # Constructor parameter names
        self.entries = {}
        for i, (label, field_name) in enumerate(zip(labels, field_names)):
            tk.Label(self.top, text=label).grid(row=i, column=0)
            entry = tk.Entry(self.top)
            entry.grid(row=i, column=1)
            self.entries[field_name] = entry  # Use constructor parameter name as key

        tk.Button(self.top, text="Save", command=self.save_employee).grid(row=len(labels), columnspan=2)

    def save_employee(self):
        details = {key: entry.get() for key, entry in self.entries.items()}
        try:
            employee = Employee(**details)  # This should now work as the keys match the expected parameter names
            self.controller.add_employee(details)
            messagebox.showinfo("Success", "Employee added successfully")
            self.top.destroy()
        except TypeError as e:
            messagebox.showerror("Error", str(e))

    def delete_employee(self):
        employee_id = simpledialog.askstring("Input", "Enter Employee ID to delete:")
        if employee_id is None:
            print("Please provide the Empoly id and try agian.")
        else:
            self.controller.delete_employee(employee_id)
            messagebox.showinfo("Success", "Employee deleted successfully")

    def modify_employee(self):
        self.top = tk.Toplevel(self.root)
        self.top.title("Update Employee Details")
        self.top.geometry("300x200")

        # Note: Key names are now simplified and match the constructor parameters exactly
        labels = ["Employee ID", "Name", "Job Title", "Department"]
        field_names = ["employee_id", "name", "job_title", "department"]  # Constructor parameter names
        self.entries = {}
        for i, (label, field_name) in enumerate(zip(labels, field_names)):
            tk.Label(self.top, text=label).grid(row=i, column=0)
            entry = tk.Entry(self.top)
            entry.grid(row=i, column=1)
            self.entries[field_name] = entry  # Use constructor parameter name as key

        tk.Button(self.top, text="Update", command=self.update_employee).grid(row=len(labels), columnspan=2)

    def update_employee(self):
        employee_id = self.entries['employee_id'].get()
        details = {key: entry.get() for key, entry in self.entries.items() if key != employee_id}
        try:
            if employee_id != None or self.controller.modify_employee(employee_id, details):
                # employee = Employee(**details)  # This should now work as the keys match the expected parameter names
                self.controller.modify_employee(employee_id, details)
                messagebox.showinfo("Success", "Employee details updated successfully")
                self.top.destroy()
            else:
                messagebox.showerror("Error", "Employee not found")
        except TypeError as e:
            messagebox.showerror("Error", str(e))

    def view_employees(self):
        top = tk.Toplevel(self.root)
        top.title("List of Employees")
        top.geometry("600x400")  # Adjust size for better display of table

        # Create a Treeview widget
        tree = ttk.Treeview(top, columns=("ID", "Name", "Job Title", "Department"), show='headings')
        tree.heading('ID', text="Employee ID")
        tree.heading('Name', text="Name")
        tree.heading('Job Title', text="Job Title")
        tree.heading('Department', text="Department")

        # Define column width and alignment
        tree.column('ID', width=100, anchor='center')
        tree.column('Name', width=150, anchor='center')
        tree.column('Job Title', width=150, anchor='center')
        tree.column('Department', width=100, anchor='center')

        for employee in self.controller.get_employees():
            tree.insert('', tk.END,
                        values=(employee.employee_id, employee.name, employee.job_title, employee.department))

        # Add a scrollbar
        scrollbar = ttk.Scrollbar(top, orient='vertical', command=tree.yview)
        tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        tree.pack(side='left', fill='both', expand=True)

    # Adding Guest Detials
    def add_guest(self):
        self.top = tk.Toplevel(self.root)
        self.top.title("Add New Guest")
        self.top.geometry("300x200")

        # Note: Key names are now simplified and match the constructor parameters exactly
        labels = ["Client ID", "Name", "Address", "Contact Info"]
        field_names = ["guest_id", "name", "address", "contact_info"]  # Constructor parameter names
        self.entries = {}
        for i, (label, field_name) in enumerate(zip(labels, field_names)):
            tk.Label(self.top, text=label).grid(row=i, column=0)
            entry = tk.Entry(self.top)
            entry.grid(row=i, column=1)
            self.entries[field_name] = entry  # Use constructor parameter name as key

        tk.Button(self.top, text="Save", command=self.save_guest).grid(row=len(labels), columnspan=2)

    def save_guest(self):
        details = {key: entry.get() for key, entry in self.entries.items()}
        try:
            # employee = Employee(**details)  # This should now work as the keys match the expected parameter names
            self.controller.add_guest(details)
            messagebox.showinfo("Success", "Client added successfully")
            self.top.destroy()
        except TypeError as e:
            messagebox.showerror("Error", str(e))

    def view_guest(self):
        top = tk.Toplevel(self.root)
        top.title("List of Clients")
        top.geometry("600x400")  # Adjust size for better display of table

        # Create a Treeview widget
        tree = ttk.Treeview(top, columns=("ID", "Name", "Address", "Contact Info"), show='headings')
        tree.heading('ID', text="Guest ID")
        tree.heading('Name', text="Name")
        tree.heading('Address', text="Address")
        tree.heading('Contact Info', text="Contact Info")

        # Define column width and alignment
        tree.column('ID', width=100, anchor='center')
        tree.column('Name', width=150, anchor='center')
        tree.column('Address', width=150, anchor='center')
        tree.column('Contact Info', width=100, anchor='center')

        for guest in self.controller.get_guests():
            tree.insert('', tk.END, values=(guest.guest_id, guest.name, guest.address, guest.contact_info))

        # Add a scrollbar
        scrollbar = ttk.Scrollbar(top, orient='vertical', command=tree.yview)
        tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        tree.pack(side='left', fill='both', expand=True)

    # adding Event details
    def add_event(self):
        self.top = tk.Toplevel(self.root)
        self.top.title("Add New Event")
        self.top.geometry("300x200")

        # Note: Key names are now simplified and match the constructor parameters exactly
        labels = ["Event ID", "Type", "Theme", "Date", "Time", "Duration"]
        field_names = ["event_id", "type", "theme", "date", "time", "duration"]  # Constructor parameter names
        self.entries = {}
        for i, (label, field_name) in enumerate(zip(labels, field_names)):
            tk.Label(self.top, text=label).grid(row=i, column=0)
            entry = tk.Entry(self.top)
            entry.grid(row=i, column=1)
            self.entries[field_name] = entry  # Use constructor parameter name as key

        tk.Button(self.top, text="Save", command=self.save_event).grid(row=len(labels), columnspan=2)

    def save_event(self):
        details = {key: entry.get() for key, entry in self.entries.items()}
        try:
            # employee = Employee(**details)  # This should now work as the keys match the expected parameter names
            self.controller.add_event(details)
            messagebox.showinfo("Success", "Event added successfully")
            self.top.destroy()
        except TypeError as e:
            messagebox.showerror("Error", str(e))

    def view_event(self):
        top = tk.Toplevel(self.root)
        top.title("List of Events")
        top.geometry("800x400")  # Adjust size for better display of table

        # Create a Treeview widget
        tree = ttk.Treeview(top, columns=("ID", "Type", "Theme", "Date", "Time", "Duration"), show='headings')
        tree.heading('ID', text="Event ID")
        tree.heading('Type', text="Type")
        tree.heading('Theme', text="Theme")
        tree.heading('Date', text="Date")
        tree.heading('Time', text="Time")
        tree.heading('Duration', text="Duration")

        # Define column width and alignment
        tree.column('ID', width=100, anchor='center')
        tree.column('Type', width=150, anchor='center')
        tree.column('Theme', width=150, anchor='center')
        tree.column('Date', width=100, anchor='center')
        tree.column('Time', width=100, anchor='center')
        tree.column('Duration', width=100, anchor='center')

        for event in self.controller.get_events():
            tree.insert('', tk.END,
                        values=(event.event_id, event.type, event.theme, event.date, event.time, event.duration))

        # Add a scrollbar
        scrollbar = ttk.Scrollbar(top, orient='vertical', command=tree.yview)
        tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        tree.pack(side='left', fill='both', expand=True)

    # Adding Venue Detials
    def add_venue(self):
        self.top = tk.Toplevel(self.root)
        self.top.title("Add New Venue")
        self.top.geometry("300x200")

        # Note: Key names are now simplified and match the constructor parameters exactly
        labels = ["Venue ID", "Name", "Address", "Capacity"]
        field_names = ["venue_id", "name", "address", "capacity"]  # Constructor parameter names
        self.entries = {}
        for i, (label, field_name) in enumerate(zip(labels, field_names)):
            tk.Label(self.top, text=label).grid(row=i, column=0)
            entry = tk.Entry(self.top)
            entry.grid(row=i, column=1)
            self.entries[field_name] = entry  # Use constructor parameter name as key

        tk.Button(self.top, text="Save", command=self.save_venue).grid(row=len(labels), columnspan=2)

    def save_venue(self):
        details = {key: entry.get() for key, entry in self.entries.items()}
        try:
            # employee = Employee(**details)  # This should now work as the keys match the expected parameter names
            self.controller.add_venue(details)
            messagebox.showinfo("Success", "Venue added successfully")
            self.top.destroy()
        except TypeError as e:
            messagebox.showerror("Error", str(e))

    def view_venue(self):
        top = tk.Toplevel(self.root)
        top.title("List of Venues")
        top.geometry("600x400")  # Adjust size for better display of table

        # Create a Treeview widget
        tree = ttk.Treeview(top, columns=("ID", "Name", "Address", "Capacity"), show='headings')
        tree.heading('ID', text="Venue ID")
        tree.heading('Name', text="Name")
        tree.heading('Address', text="Address")
        tree.heading('Capacity', text="Capacity")

        # Define column width and alignment
        tree.column('ID', width=100, anchor='center')
        tree.column('Name', width=150, anchor='center')
        tree.column('Address', width=150, anchor='center')
        tree.column('Capacity', width=100, anchor='center')

        for venue in self.controller.get_venues():
            tree.insert('', tk.END, values=(venue.venue_id, venue.name, venue.address, venue.capacity))

        # Add a scrollbar
        scrollbar = ttk.Scrollbar(top, orient='vertical', command=tree.yview)
        tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        tree.pack(side='left', fill='both', expand=True)

    def run(self):
        self.root.mainloop()


if __name__ == "__main__":
    root = tk.Tk()
    app = EventManagementApp(root)
    app.run()
